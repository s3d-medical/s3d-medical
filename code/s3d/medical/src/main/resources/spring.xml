<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"

	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- 扫描service -->
	<context:component-scan base-package="com.s3d.**.impl" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations" value="classpath*:/config.properties" />
	</bean>
	
	<!-- 数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
<!-- 		<property name="maxIdle" value="20" /> -->
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- 
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
		 -->

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
	
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" /> 
	
		<!-- 监控数据库 -->
		<!-- 
		<property name="filters" value="stat" />
		 -->
		<property name="filters" value="mergeStat" />
	</bean>
	
<!-- 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  -->
<!-- 		destroy-method="close"> -->
<!-- 	<property name="driverClassName" value="com.mysql.jdbc.Driver" /> -->
<!-- 	<property name="url" value="jdbc:mysql://127.0.0.1:3306/medical?useUnicode=true&amp;characterEncoding=UTF-8"  -->
<!-- 		/> -->
<!-- 	<property name="username" value="root" /> -->
<!-- 	<property name="password" value="root" /> -->

<!-- 	<property name="maxActive" value="50" /> -->
<!-- 	<property name="maxIdle" value="200" /> -->
<!-- 	<property name="defaultAutoCommit" value="false" /> -->
<!-- 	<property name="timeBetweenEvictionRunsMillis" value="3600000"/> -->
<!-- 	<property name="minEvictableIdleTimeMillis" value="3600000"/> -->
<!-- 	</bean> -->

<!-- 	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
<!-- 		<property name="jndiName"> -->
<!-- 			<value>java:comp/env/jdbc/ehr</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	<!-- enable autowire -->
	<context:annotation-config />
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/hbm</value>
			</list>
		</property>
	</bean>

	<!-- transaction manager, use JtaTransactionManager for global tx -->

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager" autowire="byName">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	 <!-- 定义事务拦截器bean -->  
	<bean id="transactionInterceptor"  
        class="org.springframework.transaction.interceptor.TransactionInterceptor">  
        <property name="transactionManager" ref="transactionManager" />  
        <property name="transactionAttributes">  
            <props>  
                <prop key="add*">PROPAGATION_REQUIRED</prop>
                <prop key="create*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="copy*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="scan*">PROPAGATION_REQUIRED</prop>
				<prop key="init*">PROPAGATION_REQUIRED</prop>
				<prop key="clone*">PROPAGATION_REQUIRED</prop>
				<prop key="genarate*">PROPAGATION_REQUIRED</prop>				
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
            </props>  
        </property>  
    </bean>  
    
    <!-- 定义BeanNameAutoProxyCreator-->  
    <bean  
        class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">  
        <property name="beanNames">  
        <!-- 所有名字以DAO,Service结尾的bean,将由该"bean后处理器"为其创建事务代理;实际上应该在业务层进行事务管理,这里只是举一个简单例子 -->  
            <value>*DAO,*Service</value>  
        </property>  
        <!--  下面定义BeanNameAutoProxyCreator所需的事务拦截器-->  
        <property name="interceptorNames">  
            <list>  
                <!-- 可以增加其他的拦截器 -->  
                <value>transactionInterceptor</value>  
            </list>  
        </property>  
    </bean>  
    
<!-- 	<tx:annotation-driven transaction-manager="transactionManager" />	 -->

	<bean id="springContextHolder" class="com.s3d.webapps.framework.spring.SpringContextHolder" />
	<bean id="childOfAnnotationsProcessor" class="com.s3d.webapps.framework.spring.annotation.ChildOfBeanFactoryPostProcessor" />
    <bean id="resourceOfAnnotationsProcessor" class="com.s3d.webapps.framework.spring.annotation.ResourceOfBeanFactoryPostProcessor" />
</beans> 